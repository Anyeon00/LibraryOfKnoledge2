Abastract Action 동일한 기능의 버튼을 여기저기 만들때

JMenuItem같은 객체의 정보(이름,icon,..)와 행동(이벤트핸들러)를 가지고 있는 객체
즉, JMenuItem을 만들때 이 객체를 사용해서 만듦

ex) 사용안한 경우
JMenuItem boxItem = new JMenuItem("Box (B)");   //이름:Box(B)
        pointItem.setIcon(new ImageIcon("box.gif"));  //아이콘
        popupPtr.add(boxItem);
        boxItem.addActionListener((evt) ->{
            view.setWhatToDraw(DrawerView.ID_BOX);
        });
ex) 사용한 경우 1번
JMenuItem boxItem = new JMenuItem(
	new SelectAction("Box (B)", new ImageIcon("box.gif"), view, Drawerview.ID_BOX)
);	//view는 이벤트핸들러구현객체
popupPtr.add(boxItem);	//Menu바에 MenuItem추가

ex) 사용한 경우 2번
SelectAction sa = new SelectAction("Box(B)", new Image(con("box.gif"),view,DrawerView.ID_BOX);

JMenuItem boxItem = new JMenuItem(sa);
popupPtr.add(boxItem);



라이브러리의 Abstraction Action클래스 상속받아서 Action객체 만들기(클래스)
ActionPerformed함수 구현해야됨

클래스 ex)
public class SelectAction extends AbstractAction {
    private DrawerView view;
    public SelectAction(String name, Icon icon, DrawerView view, int id){
        putValue(Action.NAME, name);    //상위클래스에 가지고 있는 NAME에 arguement name넣어주면 자동으로 붙여짐
        putValue(Action.SMALL_ICON, icon);
        this.view = view;   //상위클래스에 없는 멤버이므로 직접 이 클래스에 멤버만들어서 저장
        putValue("id", id);
    }
    public void actionPerformed(ActionEvent e) {    //사용할 이벤트핸들러도 여기서 구현
        int id = (int) getValue("id");  //return typel object라서 type casting
        view.setWhatToDraw(id);
    }
}
